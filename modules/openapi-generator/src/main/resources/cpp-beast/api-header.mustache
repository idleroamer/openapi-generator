#ifndef _{{classname}}_H_
#define _{{classname}}_H_

#include <string>
#include <cstring>
#include <functional>
#include <optional>

{{#imports}}
{{{import}}}
{{/imports}}

#include "HttpCommon.h"

#include <boost/asio.hpp>

namespace asio = boost::asio;        // from <boost/asio.hpp>

/** \defgroup Operations API Endpoints
 *  Classes containing all the functions for calling API endpoints
 *
 */

{{#cppNamespaceDeclarations}}
namespace {{this}} { //NOLINT(modernize-concat-nested-namespaces)
{{/cppNamespaceDeclarations}}

{{#operations}}
/** \addtogroup {{{baseName}}} {{{baseName}}}
 * \ingroup Operations
 *  @{
 */
class {{classname}} {
public:
	{{classname}}(std::string host, unsigned int port, std::string basePath);
	virtual ~{{classname}}();

	{{#operation}}
    using {{nickname}}CompletionHandler = std::function<void(HttpResponse{{#returnType}}, std::optional<{{{returnType}}}>{{/returnType}})>;

    /*! \brief {{{summary}}}. *Synchronous*
     *
     * {{{notes}}}{{#allParams}}
     * \param {{paramName}} {{{description}}}{{#required}} *Required*{{/required}}{{/allParams}}
     * \param handler The callback function to be invoked on completion. *Required*
     * \param accessToken The Authorization token. *Required*
     * \param userData The user data to be passed to the callback function.
     */
    {{#returnType}}std::optional<{{{returnType}}}>{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}}({{#allParams}}{{{dataType}}}{{#isBodyParam}} const &{{/isBodyParam}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}}, {{/hasParams}} HttpResponse &response);

    /*! \brief {{{summary}}}. *Asynchronous*
     *
     * {{{notes}}}{{#allParams}}
     * \param {{paramName}} {{{description}}}{{#required}} *Required*{{/required}}{{/allParams}}
     * \param handler The callback function to be invoked on completion. *Required*
     * \param accessToken The Authorization token. *Required*
     * \param userData The user data to be passed to the callback function.
     */
    void {{nickname}}Async(asio::io_service &ioService, {{#allParams}}{{{dataType}}}{{#isBodyParam}} const &{{/isBodyParam}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}}, {{/hasParams}} {{{nickname}}}CompletionHandler handler);

	{{/operation}}

private:
    std::string m_host;
	unsigned int m_port;
	std::string m_basePath;
};
/** @}*/

{{/operations}}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}

#endif /* {{classname}}_H_ */
